### ===========================================
### MY WEB COMPANION - API TESTS
### ===========================================

### Variables
@baseUrl = http://localhost:8080
@authToken = Bearer YOUR_JWT_TOKEN_HERE

### ===========================================
### AUTH - GET USER PROFILE
### ===========================================
GET {{baseUrl}}/api/users/profile
Authorization: {{authToken}}

### ===========================================
### LABELS API
### ===========================================

### Get all labels
GET {{baseUrl}}/api/labels
Authorization: {{authToken}}

### Create a new label
POST {{baseUrl}}/api/labels
Authorization: {{authToken}}
Content-Type: application/json

{
  "name": "Important"
}

### Update a label
PUT {{baseUrl}}/api/labels/LABEL_ID_HERE
Authorization: {{authToken}}
Content-Type: application/json

{
  "name": "Very Important"
}

### Delete a label
DELETE {{baseUrl}}/api/labels/LABEL_ID_HERE
Authorization: {{authToken}}

### Delete a label (force)
DELETE {{baseUrl}}/api/labels/LABEL_ID_HERE?forceDelete=true
Authorization: {{authToken}}

### ===========================================
### NOTEBOOKS API
### ===========================================

### Get all notebooks
GET {{baseUrl}}/api/notebooks
Authorization: {{authToken}}

### Create a new notebook
POST {{baseUrl}}/api/notebooks
Authorization: {{authToken}}
Content-Type: application/json

{
  "title": "Work Notes"
}

### Update a notebook
PUT {{baseUrl}}/api/notebooks/1
Authorization: {{authToken}}
Content-Type: application/json

{
  "title": "Updated Work Notes"
}

### Delete a notebook
DELETE {{baseUrl}}/api/notebooks/1
Authorization: {{authToken}}

### Get notes from a notebook
GET {{baseUrl}}/api/notes/notebooks/1/notes
Authorization: {{authToken}}

### ===========================================
### NOTES API
### ===========================================

### Get all notes
GET {{baseUrl}}/api/notes
Authorization: {{authToken}}

### Create a new note
POST {{baseUrl}}/api/notes
Authorization: {{authToken}}
Content-Type: application/json

{
  "title": "Test Note",
  "content": "This is a test note content"
}

### Create a note in a specific notebook
POST {{baseUrl}}/api/notes/notebooks/1
Authorization: {{authToken}}
Content-Type: application/json

{
  "title": "Note in Notebook",
  "content": "This note belongs to a notebook"
}

### Update a note
PUT {{baseUrl}}/api/notes/1
Authorization: {{authToken}}
Content-Type: application/json

{
  "title": "Updated Note Title",
  "content": "Updated content"
}

### Move note to notebook
PUT {{baseUrl}}/api/notes/1/notebook
Authorization: {{authToken}}
Content-Type: application/json

{
  "notebookId": 1
}

### Remove note from notebook
PUT {{baseUrl}}/api/notes/1/notebook
Authorization: {{authToken}}
Content-Type: application/json

{
  "notebookId": null
}

### Delete a note
DELETE {{baseUrl}}/api/notes/1
Authorization: {{authToken}}

### ===========================================
### BLOC NOTES API
### ===========================================

### Get bloc note
GET {{baseUrl}}/api/bloc-note
Authorization: {{authToken}}

### Update bloc note
PUT {{baseUrl}}/api/bloc-note
Authorization: {{authToken}}
Content-Type: application/json

{
  "content": "This is my quick note content"
}

### Delete bloc note
DELETE {{baseUrl}}/api/bloc-note
Authorization: {{authToken}}

### ===========================================
### COMMENTS API
### ===========================================

### Get comments for a note
GET {{baseUrl}}/api/comments/notes/1
Authorization: {{authToken}}

### Create a comment
POST {{baseUrl}}/api/comments/notes/1
Authorization: {{authToken}}
Content-Type: application/json

{
  "content": "This is a comment on the note"
}

### Update a comment
PUT {{baseUrl}}/api/comments/1
Authorization: {{authToken}}
Content-Type: application/json

{
  "content": "Updated comment content"
}

### Delete a comment
DELETE {{baseUrl}}/api/comments/1
Authorization: {{authToken}}

### Get my comments
GET {{baseUrl}}/api/comments/my-comments
Authorization: {{authToken}}

### ===========================================
### TASKS API
### ===========================================

### Get all tasks
GET {{baseUrl}}/api/tasks
Authorization: {{authToken}}

### Get pending tasks
GET {{baseUrl}}/api/tasks/pending
Authorization: {{authToken}}

### Get completed tasks
GET {{baseUrl}}/api/tasks/completed
Authorization: {{authToken}}

### Get overdue tasks
GET {{baseUrl}}/api/tasks/overdue
Authorization: {{authToken}}

### Get tasks due in 7 days
GET {{baseUrl}}/api/tasks/due-in-days?days=7
Authorization: {{authToken}}

### Create a new task
POST {{baseUrl}}/api/tasks
Authorization: {{authToken}}
Content-Type: application/json

{
  "title": "Complete project documentation",
  "description": "Write comprehensive documentation for the project",
  "dueDate": "2025-05-25T18:00:00"
}

### Update a task
PUT {{baseUrl}}/api/tasks/1
Authorization: {{authToken}}
Content-Type: application/json

{
  "title": "Updated task title",
  "description": "Updated description",
  "dueDate": "2025-05-26T20:00:00",
  "completed": false
}

### Toggle task completion
PUT {{baseUrl}}/api/tasks/1/toggle
Authorization: {{authToken}}

### Delete a task
DELETE {{baseUrl}}/api/tasks/1
Authorization: {{authToken}}

### Get pending task count
GET {{baseUrl}}/api/tasks/pending/count
Authorization: {{authToken}}

### ===========================================
### DAILY TASKS API
### ===========================================

### Get daily tasks for today
GET {{baseUrl}}/api/daily-tasks
Authorization: {{authToken}}

### Get daily tasks for specific date
GET {{baseUrl}}/api/daily-tasks?date=2025-05-20
Authorization: {{authToken}}

### Create a daily task
POST {{baseUrl}}/api/daily-tasks
Authorization: {{authToken}}
Content-Type: application/json

{
  "title": "Morning exercise",
  "description": "30 minutes workout",
  "scheduledDate": "2025-05-20",
  "priority": 2
}

### Update a daily task
PUT {{baseUrl}}/api/daily-tasks/1
Authorization: {{authToken}}
Content-Type: application/json

{
  "title": "Updated exercise",
  "description": "45 minutes workout",
  "priority": 3,
  "completed": true
}

### Delete a daily task
DELETE {{baseUrl}}/api/daily-tasks/1
Authorization: {{authToken}}

### Reorder daily tasks
PUT {{baseUrl}}/api/daily-tasks/reorder
Authorization: {{authToken}}
Content-Type: application/json

{
  "orderedIds": [3, 1, 2]
}

### Confirm end of day
POST {{baseUrl}}/api/daily-tasks/confirm-end-of-day
Authorization: {{authToken}}

### Get daily plan
GET {{baseUrl}}/api/daily-tasks/plan?date=2025-05-20
Authorization: {{authToken}}

### Get daily history
GET {{baseUrl}}/api/daily-tasks/history?date=2025-05-19
Authorization: {{authToken}}

### Get monthly report
GET {{baseUrl}}/api/daily-tasks/report/monthly?year=2025&month=5
Authorization: {{authToken}}

### ===========================================
### NOTE TASKS API
### ===========================================

### Get tasks for a note
GET {{baseUrl}}/api/note-tasks/notes/1
Authorization: {{authToken}}

### Get all my note tasks
GET {{baseUrl}}/api/note-tasks/my-tasks
Authorization: {{authToken}}

### Get pending note tasks
GET {{baseUrl}}/api/note-tasks/my-tasks/pending
Authorization: {{authToken}}

### Create a note task
POST {{baseUrl}}/api/note-tasks/notes/1
Authorization: {{authToken}}
Content-Type: application/json

{
  "title": "Review this section"
}

### Create a subtask
POST {{baseUrl}}/api/note-tasks/1/subtasks
Authorization: {{authToken}}
Content-Type: application/json

{
  "title": "Check references"
}

### Update a note task
PUT {{baseUrl}}/api/note-tasks/1
Authorization: {{authToken}}
Content-Type: application/json

{
  "title": "Updated task",
  "completed": true
}

### Toggle note task completion
PUT {{baseUrl}}/api/note-tasks/1/toggle
Authorization: {{authToken}}

### Delete a note task
DELETE {{baseUrl}}/api/note-tasks/1
Authorization: {{authToken}}

### ===========================================
### SAVED LINKS API (EXISTING)
### ===========================================

### Get all saved links
GET {{baseUrl}}/api/links
Authorization: {{authToken}}

### Create a saved link
POST {{baseUrl}}/api/links
Authorization: {{authToken}}
Content-Type: application/json

{
  "url": "https://example.com",
  "title": "Example Website",
  "description": "An example website"
}

### Update a saved link
PUT {{baseUrl}}/api/links/1
Authorization: {{authToken}}
Content-Type: application/json

{
  "url": "https://updated-example.com",
  "title": "Updated Example",
  "description": "Updated description"
}

### Delete a saved link
DELETE {{baseUrl}}/api/links/1
Authorization: {{authToken}}